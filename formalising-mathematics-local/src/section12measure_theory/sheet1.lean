/-
Copyright (c) 2023 Kevin Buzzard. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author : Kevin Buzzard
-/

import tactic -- imports all the Lean tactics
import measure_theory.measurable_space

/-

# Measure theory

## Sigma algebras.

A œÉ-algebra on a type `X` is a collection of subsets of `X` satisfying some
axioms, and in Lean you write it like this:

-/

-- let X be a set
variable (X : Type)
-- ...and let ùìê be a sigma-algebra on X
variable (ùìê : measurable_space X)

/-

Note that `measurable_space` is a *class*, so really we should be writing `[measurable_space X]`,
meaning "let `X` be equipped once and for all with a sigma algebra which we won't give a name to".
But in this sheet we'll consider making them explicitly.

Let's do the following exercise. Show that if `A` is a subset of `X` then `{0,A,A·∂ú,X}`
is a sigma algebra on `X`.

-/

def gen_by (A : set X) : measurable_space X :=
{ measurable_set' := Œª S, S = ‚àÖ ‚à® S = A ‚à® S = A·∂ú ‚à® S = ‚ä§,
  measurable_set_empty := begin
    left,
    refl,
  end,
  measurable_set_compl := begin
    intro s,
    intro h,
    cases h,
    { right, right, right,
      rw set.top_eq_univ,
      simp,
      exact h, },
    { cases h,
      { right, right, left,
        simp,
        exact h, },
      { cases h,
        { right, left,
          rw compl_eq_comm,
          rw eq_comm,
          exact h, },
        { left,
          rw set.top_eq_univ at h,
          rw <- set.compl_univ,
          simp,
          exact h, }, }, },
  end,
  measurable_set_Union := begin
    sorry,
  end }

-- An alternative approach to defining the sigma algebra generated by `{A}` is just
-- to use `measurable_space.generate_from`:

example (A : set X) : measurable_space X := measurable_space.generate_from {A}

-- But the problem with that approach is that you don't get the actual sets
-- in the sigma algebra for free. Try this, to see what I mean!
example (A : set X) : (measurable_space.generate_from {A}).measurable_set' = ({‚àÖ,A,A·∂ú,‚ä§} : set (set X)) :=
begin
  sorry,
end
